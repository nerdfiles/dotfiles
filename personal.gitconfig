[user]
  name = nerdfiles
  email = nerdfiles@gmail.com
  user = nerdfiles
[core]
  excludesfile = /Users/nerdfiles/.gitignore
  legacyheaders = false # >git 1.5
  quotepath = false
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
  # http://stackoverflow.com/questions/136178/git-diff-handling-long-lines
  editor='mvim -f --nomru -c "au VimLeave * !open -a iTerm"'
  visual='mvim -f --nomru -c "au VimLeave * !open -a iTerm"'
  pager = less -r
  # if ↑ doesn’t work, try: pager = less -+$LESS -FRX
[color]
  ui = auto
  interactive = auto
[repack]
  usedeltabaseoffset = true # >git 1.5
[rerere]
  enabled = true
[alias]
  ls = !sh -c 'ls $2 $1' -
  graph-repo = !sh -c 'git gviz --first-parent master | dot -Tpdf -o graphs/git/repo.pdf'
  graph-commits = !sh -c 'git gviz HEAD~$1..HEAD~$2 | dot -Tpdf -o graphs/git/commits.pdf'
  # sort out https://code.djangoproject.com/wiki/DjangoGraphviz and 
  # @note http://stackoverflow.com/questions/6597335/installing-pygraphviz-on-os-10-6-7-python-2-6-gcc-4-2-error
  graph-all-models = !python manage.py graph_models --settings=settings.local -a -g -o graphs/app/models.pdf
  graph-app-models = !python manage.py graph_models --settings=settings.local $1 -o graphs/app/$1.models.pdf
  # @USAGE: git graph-apps-models app1 app2 -o graphs/app/descriptive-filename.pdf
  graph-apps-models = "!python manage.py graph_models --settings=settings.local"
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  sortdiff = !sh -c 'git diff "$@" | grep "^[+-]" | sort --key=1.2 | uniq -u -s1'
  gitkconflict = !gitk --left-right HEAD...MERGE_HEAD
  new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
  #intercommit = !sh -c 'git show "$1" > .git/commit1 && git show "$2" > .git/commit2 && interdiff .git/commit[12] | less -FRS' -
  prune-all = !git remote | xargs -n 1 git remote prune
  # git funcdiff <old-rev> <new-rev> <path> <function>
  # funcdiff = '!sh -c "git show \"\$0:\$2\" | sed -n \"/^[^ \t].*\$3[ \t]*(/,/^}/p\" > .tmp1 && git show \"\$1:\$2\" | sed -n \"/^[^ \t].*\$3[ \t]*(/,/^}/p\" > .tmp2 && git diff --no-index .tmp1 .tmp2"'
  oneline ="!_() { $(test $# -eq 0 && echo xargs -L1) git log --no-walk --decorate --oneline \"$@\"; }; _"
  tips = "!_() { t=$(git rev-list --no-merges --max-count=1 \"$@\"); if test -n \"$t\"; then echo $t; _ \"$@\" ^$t; fi; }; _"
  deleted = ls-files --deleted
  details = log -n1 -p --format=fuller
  today = "log --stat --since='1 Day Ago' --graph --pretty=oneline --abbrev-commit --date=relative"
  abbr = "!sh -c 'git rev-list --all | grep ^$1 | while read commit; do git --no-pager log -n1 --pretty=format:\"%H %ci %an %s%n\" $commit; done' -"
  branchname = !git branch | grep "^*" | awk '{ print $2 }'
  this = !git init && git add . && git commit -m \"initial commit\"
  s = status
  ss = status -s
  cg = !sh -c 'git ls-files -m | grep $1 | xargs -r git checkout' -
  rmg = !sh -c 'git ls-files -d | grep $1 | xargs -r git rm' -
  rsg = !sh -c 'git ls-files -c --with-tree=HEAD | grep $1 | xargs -r git reset HEAD -- ' -
  unstage = !git reset HEAD
  a = !git add -p . && git status
  au = !git add -u . && git status
  aa = !git add . && git add -u . && git status
  ag = "!sh -c 'git ls-files -m -o --exclude-standard | grep $1 | xargs -r git add' -"
  cm = commit -m
  acm = !git add . && git commit -m
  lp = log -p
  lol = log --source --graph --decorate --pretty=oneline --abbrev-commit
  lola = log --source --graph --decorate --pretty=oneline --abbrev-commit --all
  l = log --stat --decorate --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  le = log --oneline --decorate
  lo = log --graph --pretty=format:'%C(yellow)%h%Creset%C(blue)%d%Creset %C(white bold)%s%Creset %C(white dim)(by %an %ar)%Creset'
  lb = log --graph --simplify-by-decoration --pretty=format:'%d' --all
  gviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
  conflicts = !git ls-files --unmerged | cut -f2 | uniq  
  whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
  filelog = log -u
  fl = log -u
  dl = "!git ll -1"
  dlc = diff --cached HEAD^
  missing-from = !git tips $1 | git oneline
  f = "!git ls-files | grep -i"
  grep = grep -Ii
  gr = grep -Ii
  gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
  la = "!git config -l | grep alias | cut -c 7-"
  absorb = !git merge -s recursive -X theirs # "merge from"
  automerge = merge -Xtheirs
  d = diff --color-words
  dc = diff --cached
  dh = diff --color-words head
  dg = "!sh -c 'git ls-files -m | grep $1 | xargs -r git diff' -"
  pg = "!sh -c 'git ls-files -m | grep $1 | xargs -r git diff --cached' -"
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
  hold = update-index --skip-worktree
  unhold = update-index --no-skip-worktree
  search = !git rev-list --all | xargs git grep -F
  cv = commit --no-verify
  held = !git ls-files -v | grep ^S
  lasttag = describe --tags --abbrev=0
  lt = describe --tags --abbrev=0
  ign = ls-files -o -i --exclude-standard
  r  = !git ls-files -z --deleted | xargs -0 git rm  
  up = push -u origin
  down = pull -u origin
  master = checkout master
  dev = checkout dev
  staging = checkout staging
  draft = checkout draft
  co = checkout
  wipe = !git fetch origin && git reset --hard # origin/branch
  undo = reset --hard
  r = reset
  r1 = reset HEAD^
  r2 = reset HEAD^^
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh2 = reset HEAD^^ --hard
  sl = stash list
  sa = stash apply
  ss = stash save
  spull = svn rebase
  spush = svn dcommit
  hubbed = !git remote add origin
  tickle = touch readme.markdown
  shitdone = !git master && git merge dev && git acm 'merge dev' && git up master && git dev
  mergedown = !git acm "\\#mergedown" && git up master && git checkout
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort
  tree = "forest --pretty=format:\"%C(red)%h %C(magenta)(%ar) %C(blue)%an %C(reset)%s\" --style=15 --reverse"
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
  lg1 = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative
  lg2 = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(bold white)— %an%C(reset)' --abbrev-commit
  lg3 = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
  llog = log --date=local
  switch = !legit switch \"$@\"
  branches = !legit branches
  sprout = !legit sprout \"$@\"
  unpublish = !legit unpublish \"$@\"
  harvest = !legit harvest \"$@\"
  sync = !legit sync \"$@\"
  publish = !legit publish \"$@\"
  graft = !legit graft \"$@\"
  ignore="!f() { [ -z "$@" ] && echo "git: usage git ignore [file]" || ( ([ ! -e .gitignore ] && touch .gitignore); echo $1 >>.gitignore && echo "Ignoring file $1" && git rm --cached "$@" > /dev/null 2>&1 && git st ); }; f"
  freeze="!f() { ( [ -z $@ ] && git add -A || git add -A "$@" ) && git st; }; f"
  unfreeze="!f() { ([ -z "$@" ] && (git reset -q HEAD > /dev/null 2>&1 || echo "first commit must be unfrozen file by file. better error message coming soon") || (git reset -q HEAD -- $@ > /dev/null 2>&1 || git rm -q --cached $@ ) ) && git st; }; f"
  st="!f() { br=$(git status | head -1) && echo "${br}" && git status -s; }; f"
  history=log
  d="!git log --diff-filter=D --summary"
  del="!git log --diff-filter=D --summary | grep delete"
  wip = "!f() { git add -A; git ls-files --deleted -z | xargs -0 -r git rm; s=`git show --format=%s HEAD | head -1`; if [ \"wip\" = \"$s\" ]; then git commit --amend -m \"wip\"; else git commit -m \"wip\"; fi;}; f"
  fixup = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
  squash = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -
  ri = rebase --interactive --autosquash
[diff]
  renames = copies
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[push]
  default = simple

[user]
  name = [name] 
  email = [email] 
  user = [user]
  token = [api_key] 
[core]
  excludesfile = /Users/[user]/.gitignore
  legacyheaders = false # >git 1.5
  quotepath = false
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
  pager = less -r
  # if ↑ doesn’t work, try: pager = less -+$LESS -FRX
  # http://stackoverflow.com/questions/136178/git-diff-handling-long-lines
[color]
  ui = auto
  interactive = auto
[repack]
  usedeltabaseoffset = true # >git 1.5
[alias]
  
  
  this = !git init && git add . && git commit -m \"initial commit\"

  #
  s = status

  #
  a = !git add -i . && git status
  
  #
  au = !git add -u . && git status

  #
  aa = !git add . && git add -u . && git status
  #aa = !git ls-files -d | xargs -r git rm && git ls-files -m -o --exclude-standard | xargs -r git add  
  
  # 'add grep' stages all new+changed that match $1
  ag = "!sh -c 'git ls-files -m -o --exclude-standard | grep $1 | xargs -r git add' -"
  
  cg = "!sh -c 'git ls-files -m | grep $1 | xargs -R git checkout' -"

  # 'diff grep' diffs any files that match $1
  dg = "!sh -c 'git ls-files -m | grep $1 | xargs -r git diff' -"
  
  # 'patch grep' diff --cached any files that match $1
  pg = "!sh -c 'git ls-files -m | grep $1 | xargs -r git diff --cached' -"
  
  # 'remove grep' remove any files that match $1
  rmg = "!sh -c 'git ls-files -d | grep $1 | xargs -r git rm' -"
  
  # 'reset grep' reset any files that match $1
  rsg = "!sh -c 'git ls-files -c --with-tree=HEAD | grep $1 | xargs -r git reset HEAD -- ' -"
  
  c = commit
  cm = commit -m
  ca = commit --amend # careful
  ac = !git add . && git commit
  acm = !git add . && git commit -m
  lg = log -p
  ls = ls-files
  lol = log --graph --decorate --pretty=oneline --abbrev-commit
  lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
  l = log --graph --all --pretty=format:'%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset'
  lx = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  ll = log --stat --abbrev-commit
  loga = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
  graph = log —-graph —-all —-pretty=oneline —-decorate —-color —-date-order
  d = diff --color-words
  dc = diff --cached
  dh = diff --color-words head
  untrack = update-index --assume-unchanged
  track = update-index --no-assume-unchanged
  ign = ls-files -o -i --exclude-standard
  up = push -u origin
  down = pull -u origin
  master = checkout master
  dev = checkout dev
  staging = checkout staging
  wipe = !git fetch origin && git reset --hard # origin/branch
  r  = !git ls-files -z --deleted | xargs -0 git rm
  local = !git fetch origin && git reset --hard # origin/branch
  spull = svn rebase
  spush = svn dcommit
  absorb = !git merge -s recursive -X theirs # "merge from"
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort
	switch = !legit switch \"$@\"
	branches = !legit branches
	sprout = !legit sprout \"$@\"
	unpublish = !legit unpublish \"$@\"
	harvest = !legit harvest \"$@\"
	sync = !legit sync \"$@\"
	publish = !legit publish \"$@\"
	graft = !legit graft \"$@\"
[diff]
  renames = copies
  # git does copy/rename *detection*. if you want it to track copies/renames:
  # http://stackoverflow.com/questions/1043388/record-file-copy-operation-with-git
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

